CREATE DATABASE EVENTMANAGEMENT;

USE EVENTMANAGEMENT;


CREATE TABLE USER 
(
USER_ID INT NOT NULL AUTO_INCREMENT,
FIRST_NAME VARCHAR(20),
LAST_NAME VARCHAR(20),
EMAIL VARCHAR(20),
PASSWORD VARCHAR(256), 
PRIMARY KEY (USER_ID),
UNIQUE KEY (EMAIL)
);

CREATE TABLE EVENT
(
  EVENT_ID INT  NOT NULL AUTO_INCREMENT,
  EVENT_NAME VARCHAR(20)  NOT NULL, 
  EVENT_CATEGORY VARCHAR(20)  NOT NULL,
  EVENT_CITY VARCHAR(20)  NOT NULL,
  EVENT_PINCODE VARCHAR(20)  NOT NULL,
  EVENT_DATE DATE  NOT NULL,
  EVENT_TIME TIMESTAMP ,  
  EVENT_PRICE INT,
  PRIMARY KEY (EVENT_ID)
);


CREATE TABLE ATTENDEE
(
  ATTENDEE_ID         INT NOT NULL AUTO_INCREMENT,
  FIRST_NAME       VARCHAR(256),
  LAST_NAME    VARCHAR(256),
  MIDDLE_NAME   VARCHAR(256),
  EMAIL VARCHAR(50),
  PHONE VARCHAR(10),
  PRIMARY KEY (ATTENDEE_ID)
);

CREATE TABLE RESERVATION
(
  RESERVATION_ID INT NOT NULL AUTO_INCREMENT,
  CHECKED_IN TINYINT(1),
  NUMBER_OF_GUESTS INT,
  ATTENDEE_ID INT,
  EVENT_ID INT,
  CREATED TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (RESERVATION_ID),
  FOREIGN KEY (ATTENDEE_ID) REFERENCES ATTENDEE(ATTENDEE_ID) ON DELETE CASCADE,
  FOREIGN KEY (EVENT_ID) REFERENCES EVENT(EVENT_ID)
);

drop table EVENT;


create table role
(
ID INT NOT NULL auto_increment,
NAME varchar(20),
primary key (id)
);

create table USER_ROLE
(
USER_ID INT,
ROLE_ID INT,
foreign key (USER_ID)
references USER(USER_ID),
foreign key (ROLE_ID)
references ROLE(ID)
);

insert INTO ROLE  VALUES (1, 'ADMIN');
INSERT INTO user_role values (1,1);

















